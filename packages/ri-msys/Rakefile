$: << File.expand_path("../../../lib", __FILE__)

require "ruby_installer/build"

include RubyInstaller::Build::Utils
RubyInstaller::Build.enable_msys_apps

class RubyPackage < RubyInstaller::Build::Openstruct
  def initialize(*args)
    super

    self.rubyver, self.pkgrel = packagever.split("-", 2)
    self.packagename = "rubyinstaller-devkit"
    self.rubyver2 = packagever=='head' ? "3.1" : rubyver[/^\d+\.\d+/]

    case arch
    when 'x64'
      self.pacman_arch = "mingw-w64-x86_64"
      self.ruby_arch = "x64-mingw32"
      self.msys_arch = "x86_64"
      self.msysdir = "msys64"
      self.mingwdir = "mingw64"
      self.default_instdir = "C:\\Ruby#{rubyver2.gsub(".","")}-x64"
    when 'x86'
      self.pacman_arch = "mingw-w64-i686"
      self.ruby_arch = "i386-mingw32"
      self.msys_arch = "i686"
      self.msysdir = "msys32"
      self.mingwdir = "mingw32"
      self.default_instdir = "C:\\Ruby#{rubyver2.gsub(".","")}"
    else
      raise "invalid arch #{arch}"
    end

    self.packagenameverarch = "#{packagename}-#{ packagever=='head' ? 'head' : packagever }-#{arch}"
    self.pacman_ruby = "#{pacman_arch}-ruby#{ packagever=='head' ? '-head' : "#{rubyver2.gsub(".","")}=#{rubyver}" }"
  end
end

ovl_glob('recipes/*/task.rake').each{|f| load(ovl_expand_file(f)) }

ruby_arch_packages = %w[x64 x86].map do |arch|
  %w[2.4.10-2 2.5.9-1 2.6.7-1 2.7.3-1 3.0.1-1 head].map do |packagever|
    RubyPackage.new( packagever: packagever, arch: arch, rootdir: __dir__ ).freeze
  end
end

ruby_arch_packages.each do |ruby_packages|
  # Define MSYS2 installation tasks only once per arch and reuse it for different ruby versions.
  msys2 = nil
  namespace "msys2-#{ruby_packages.first.msys_arch}" do
    msys2 = RubyInstaller::Build::Task.new( thisdir: "recipes/msys2", package: ruby_packages.first )
  end

  ruby_packages.each do |pack|
    nsp = "ruby-#{pack.rubyver}-#{pack.arch}"
    namespace nsp do
      unpack = RubyInstaller::Build::Task.new( thisdir: "recipes/unpack", package: pack )
      sandbox = RubyInstaller::Build::Task.new( thisdir: "recipes/sandbox", package: pack, unpack_task: unpack, msys2_task: msys2 )
      RubyInstaller::Build::Task.new( thisdir: "recipes/installer-inno", package: pack, sandbox_task: sandbox )
      RubyInstaller::Build::Task.new( thisdir: "recipes/archive-7z", package: pack, sandbox_task: sandbox )
    end

    desc "Build all for #{nsp}"
    task nsp => ["#{nsp}:installer-inno", "#{nsp}:archive-7z"]

    desc "Build installers for all rubies"
    task :default => nsp
  end
end
